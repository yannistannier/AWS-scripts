{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : " Cloudformation Stack Stagging Sans base de donnee",
  "Mappings": {
    "ElasticSearchDomain" : {
        "Domaine" : {
          "name" : "https://xxxxxxx.eu-west-1.es.amazonaws.com/"
        }
    },
    "Database":{
        "RDS" : {
          "database" : "xxxxx ",
          "password" : "xxxxx",
          "port" : "5432",
          "host" : "xxxxx.eu-west-1.rds.amazonaws.com",
          "user" : "xxxx"
        }
    },

    "Rekognition":{
          "us-east-1": { "region" : "us-east-1"},
          "us-east-2": { "region" : "us-east-1"},
          "us-west-1": { "region" : "us-west-2"},
          "us-west-2": { "region" : "us-west-2"},
          "ca-central-1": { "region" : "us-east-1"},
          "eu-west-1": { "region" : "eu-west-1"},
          "eu-west-2": { "region" : "eu-west-1"},
          "eu-central-1": { "region" : "eu-west-1"}
    }
  },
  "Resources": {
    "userIamBarney" : {
      "Type": "AWS::IAM::User",
      "Properties": {
      }
    },

    "bucketSettings": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy":"Delete",
      "Properties": {
      }
    },

    "dynamodbTableEventLog": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        },
        "AttributeDefinitions": [
          {
            "AttributeName": "timestamp",
            "AttributeType": "N"
          },
          {
            "AttributeName": "type",
            "AttributeType": "S"
          },
          {
            "AttributeName": "uuid",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "type",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "uuid",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "15",
          "WriteCapacityUnits": "20"
        },
        "GlobalSecondaryIndexes": [
          {
            "IndexName": "type-timestamp-index",
            "KeySchema": [
              {
                "AttributeName": "type",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "timestamp",
                "KeyType": "RANGE"
              }
            ],
            "Projection": {
              "ProjectionType": "ALL"
            },
            "ProvisionedThroughput": {
              "ReadCapacityUnits": "15",
              "WriteCapacityUnits": "20"
            }
          }
        ]
      }
    },

    "dynamodbTableEmailing": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          },
          {
            "AttributeName": "email_id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "email_id",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "20",
          "WriteCapacityUnits": "20"
        }
      }
    },

    "dynamodbTableRekognition": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "user_id",
            "AttributeType": "N"
          },
          {
            "AttributeName": "uuid",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "user_id",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "uuid",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "1",
          "WriteCapacityUnits": "1"
        }
      }
    },

    "sqsEmaildeadqueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "DelaySeconds": "0",
        "MaximumMessageSize": "262144",
        "MessageRetentionPeriod": "864000",
        "ReceiveMessageWaitTimeSeconds": "0",
        "VisibilityTimeout": "30"
      }
    },

    "sqsEmail": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "DelaySeconds": "0",
        "MaximumMessageSize": "262144",
        "MessageRetentionPeriod": "864000",
        "ReceiveMessageWaitTimeSeconds": "0",
        "VisibilityTimeout": "30",
        "RedrivePolicy": {
          "maxReceiveCount": 3,
          "deadLetterTargetArn": {
            "Fn::GetAtt": [
              "sqsEmaildeadqueue",
              "Arn"
            ]
          }
        }
      }
    },

    "sqsEmailPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "sqsEmail"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "SQSDefaultPolicy",
          "Statement": [
            {
              "Sid": "Sid1486059759388",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "SQS:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "sqsEmail",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                      "Ref": "snsSendEmail"
                    }
                }
              }
            }
          ]
        }
      }
    },

    "snsSendEmail": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "sendEmail-dev",
        "Subscription": [
          {
            "Endpoint": {
              "Fn::GetAtt": [
                "sqsEmail",
                "Arn"
              ]
            },
            "Protocol": "sqs"
          }
        ]
      }
    },

    "LambdaExecutionRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["lambda.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }
                ]
            }
        }
    },

    "LambdaExecutionRolePolicy": {
        "DependsOn": [
            "LambdaExecutionRole"
        ],
        "Type": "AWS::IAM::Policy",
        "Properties": {
            "PolicyName": "LambdaExecutionRolePolicy",
            "Roles": [
                {"Ref": "LambdaExecutionRole"},
                {"Ref": "lambdaCopyS3CodeRole"},
                {"Ref": "LambdaSendEmailRole"},
                {"Ref": "LambdaCronEmailRole"},
                {"Ref": "lambdaCreateThumbnailRole"},
                {"Ref": "lambdaEventApplicantJobRole"},
                {"Ref": "lambdaMatchingRole"},
                {"Ref": "lambdaEventMatchingRole"},
                {"Ref": "lambdaRekognitionRole"}
            ],
            "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": ["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],
                      "Resource": "arn:aws:logs:*:*:*"
                    }
                ]
            }
        }
    },

    "lambdaCopyS3CodeRole": {
        "Type": "AWS::IAM::Role",
        "DependsOn": [
          "bucketSettings"
        ],
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["lambda.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }
                ]
            },
            "Policies" : [
                {
                    "PolicyName": "lambdaCopyS3CodeRolePolicy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                               "Effect":"Allow",
                               "Action":[
                                  "s3:*"
                               ],
                               "Resource":[
                                  "arn:aws:s3:::base-staging-spitchapp-settings",
                                  "arn:aws:s3:::base-staging-spitchapp-settings/*"
                               ]
                            },
                            {
                               "Effect":"Allow",
                               "Action":[
                                  "*"
                               ],
                               "Resource": [
                                  {"Fn::Join": ["", ["arn:aws:s3:::", { "Ref": "bucketSettings"  } ]]},
                                  {"Fn::Join": ["", ["arn:aws:s3:::", { "Ref" : "bucketSettings" } , "/*" ]]}
                                ]
                            }
                        ]
                    }
                }
            ]
        }
    },

    "lambdaCopyS3Code" : {
      "Type" : "AWS::Lambda::Function",
      "Properties" : {
        "Code": {
          "ZipFile" : { "Fn::Join" : ["\n", [
            "import boto3",
            "import os",
            "import cfnresponse",
            "def handler(event, context):",
            "   if event['RequestType'] == 'Create': ",
            "      s3 = boto3.client('s3')",
            "      source_client = boto3.client('s3', 'us-east-2')",
            "      for obj in source_client.list_objects(Bucket='base-staging-spitchapp-settings')['Contents']:",
            "         copy_source = {'Bucket': 'base-staging-spitchapp-settings','Key': obj['Key']}",
            "         s3.copy(copy_source, os.environ['BUCKET'], obj['Key'], SourceClient=source_client)",
            "   if event['RequestType'] == 'Delete' : ",
            "      s3 = boto3.client('s3')",
            "      for obj in s3.list_objects(Bucket=os.environ['BUCKET'])['Contents']:",
            "         s3.delete_object(Bucket=os.environ['BUCKET'], Key=obj['Key'])",
            "   cfnresponse.send(event, context, cfnresponse.SUCCESS, {'Data':{}})"
          ]]}
        },
        "Environment" : {
          "Variables" : { "BUCKET":{"Ref": "bucketSettings"} }
        },
        "Handler" : "index.handler",
        "Role" : { "Fn::GetAtt" : ["lambdaCopyS3CodeRole", "Arn"] },
        "Runtime" : "python2.7",
        "Timeout" : "150"
      }
    },

    "ExecuteLambdaDuplicateS3": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : ["lambdaCopyS3Code", "Arn"] }
      }
    },

    "LambdaSendEmail": {
        "DependsOn": [
            "ExecuteLambdaDuplicateS3"
        ],
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Handler" : "sendEmailSqs.handler",
          "Code" : {
              "S3Bucket": {"Ref": "bucketSettings"},
              "S3Key": "lambda/sendEmailSqs.zip"
          },
          "Environment" : {
            "Variables" : {
              "NAME_SQS_QUEUE": { "Fn::GetAtt" : ["sqsEmail", "QueueName"] },
              "NAME_DYNAMODB_TABLE": {"Ref": "dynamodbTableEmailing"}
            }
          },
          "Runtime": "python2.7",
          "Timeout" : "150",
          "Role": { "Fn::GetAtt" : ["LambdaSendEmailRole", "Arn"] }
        }
    },

    "LambdaSendEmailRole": {
        "Type": "AWS::IAM::Role",
        "DependsOn": [
            "dynamodbTableEmailing"
        ],
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["lambda.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }
                ]
            },
            "Policies" : [
              {
                  "PolicyName": "LambdaSendEmailRolePolicy",
                  "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                             "Effect":"Allow",
                             "Action":[
                                "ses:SendEmail"
                             ],
                             "Resource":[
                                "*"
                             ]
                          },
                          {
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:GetItem",
                                "dynamodb:PutItem",
                                "dynamodb:Query"
                            ],
                            "Resource": [
                                {"Fn::Join": ["/",[{"Fn::Join": [":",["arn:aws:dynamodb",{"Ref": "AWS::Region"},{"Ref": "AWS::AccountId"}, "table"]]},{"Ref": "dynamodbTableEmailing"}]]}
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "sqs:ReceiveMessage",
                                "sqs:GetQueueUrl",
                                "sqs:DeleteMessage"
                            ],
                            "Resource": [
                                { "Fn::GetAtt" : ["sqsEmail", "Arn"] }
                            ]
                        }
                      ]
                  }
              }
            ]
        }
    },

    "LambdaCronEmail": {
        "DependsOn": [
            "ExecuteLambdaDuplicateS3"
        ],
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Handler" : "lambda_function.lambda_handler",
          "Code" : {
              "S3Bucket": {"Ref": "bucketSettings"},
              "S3Key": "lambda/sqsCronEmail.zip"
          },
          "Environment" : {
            "Variables" : {
              "NAME_SQS_URL": {"Ref": "sqsEmail"},
              "NAME_LAMBDA_FUNCTION": {"Ref": "LambdaSendEmail"}
            }
          },
          "Runtime": "python2.7",
          "Timeout" : "150",
          "Role": { "Fn::GetAtt" : ["LambdaCronEmailRole", "Arn"] }
        }
    },

    "LambdaCronEmailRole": {
        "Type": "AWS::IAM::Role",
        "DependsOn": [
            "LambdaSendEmail", "sqsEmail"
        ],
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["lambda.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }
                ]
            },
            "Policies" : [
              {
                  "PolicyName": "LambdaCronEmailRolePolicy",
                  "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                            "Effect": "Allow",
                            "Action": [
                                "lambda:InvokeAsync",
                                "lambda:InvokeFunction"
                            ],
                            "Resource": [
                                { "Fn::GetAtt" : ["LambdaSendEmail", "Arn"] }
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "sqs:GetQueueAttributes"
                            ],
                            "Resource": [
                                { "Fn::GetAtt" : ["sqsEmail", "Arn"] }
                            ]
                        }
                      ]
                  }
              }
            ]
        }
    },

    "EventCronEmail": {
      "Type": "AWS::Events::Rule",
      "DependsOn": [
            "LambdaCronEmail"
       ],
      "Properties": {
          "ScheduleExpression": "rate(1 minute)",
          "State": "ENABLED",
          "Targets": [
            {
              "Arn": { "Fn::GetAtt": ["LambdaCronEmail", "Arn"] },
              "Id": "TargetFunctionLambdaCronEmail"
            }
          ]
      }
    },

    "PermissionForEventCronEmailToLambdaCronEmail": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": [
            "LambdaCronEmail", "EventCronEmail"
       ],
      "Properties": {
        "FunctionName": { "Ref": "LambdaCronEmail" },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": ["EventCronEmail", "Arn"] }
      }
    },

    "lambdaCreateThumbnail": {
        "DependsOn": [
            "ExecuteLambdaDuplicateS3"
        ],
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Handler" : "createThumbnail.handler",
          "Code" : {
              "S3Bucket": {"Ref": "bucketSettings"},
              "S3Key": "lambda/createThumbnail.zip"
          },
          "Environment" : {
            "Variables" : {
              "NAME_BUCKET_SETTINGS": {"Ref": "bucketSettings"}
            }
          },
          "Runtime": "python2.7",
          "Timeout" : "250",
          "Role": { "Fn::GetAtt" : ["lambdaCreateThumbnailRole", "Arn"] }
        }
    },

    "lambdaCreateThumbnailRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": ["lambda.amazonaws.com"]
                        },
                        "Action": ["sts:AssumeRole"]
                    }
                ]
            }
        }
    },

    "lambdaCreateThumbnailRolePermission": {
        "Type": "AWS::Lambda::Permission",
        "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": { "Ref" : "lambdaCreateThumbnail" },
            "SourceArn": {
              "Fn::Join" : [ "", [
                "arn:aws:s3:::",
                { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "bucket", { "Fn::Select" : [ 2, { "Fn::Split" : [ "-", {"Ref" : "bucketSettings"} ] } ] } ] ] }
              ] ] },
            "Principal": "s3.amazonaws.com"
        }
    },

    "lambdaRekognition":{
        "Type":"AWS::Lambda::Function",
        "DependsOn": [
            "ExecuteLambdaDuplicateS3"
        ],
        "Properties" : {
            "Handler": "rekognitionImage.handler",
          "Code":{
              "S3Bucket": { "Ref": "bucketSettings"},
              "S3Key": "lambda/rekognitionImage.zip"
          },
          "Environment" : {
            "Variables" : {
              "NAME_DYNAMODB_TABLE" : {"Ref": "dynamodbTableRekognition"},
              "REGION_REKOGNITION": { "Fn::FindInMap" : [ "Rekognition", { "Ref" : "AWS::Region" }, "region" ]}
            }
          },
          "Runtime": "python2.7",
          "Timeout" : "250",
          "MemorySize":"512",
          "Role": { "Fn::GetAtt" : ["lambdaRekognitionRole", "Arn"] }
        }
    },

    "lambdaRekognitionRole":{
          "Type": "AWS::IAM::Role",
          "Properties": {
              "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "Service": ["lambda.amazonaws.com"]
                          },
                          "Action": ["sts:AssumeRole"]
                      }
                  ]
              }
          }
      },

    "lambdaRekognitionRolePermission":{
        "Type": "AWS::Lambda::Permission",
        "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": { "Ref" : "lambdaRekognition" },
            "SourceArn": {
              "Fn::Join" : [ "", [
                "arn:aws:s3:::",
                { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "bucket", { "Fn::Select" : [ 2, { "Fn::Split" : [ "-", {"Ref" : "bucketSettings"} ] } ] } ] ] }
              ] ] },
            "Principal": "s3.amazonaws.com"
        }
    },

    "bucket": {
        "Type": "AWS::S3::Bucket",
        "DependsOn": [
            "lambdaCreateThumbnail", "lambdaCreateThumbnailRolePermission", "lambdaRekognitionRolePermission"
        ],
        "Properties": {
            "BucketName" : { "Fn::Join" : [ "-", [ { "Ref" : "AWS::StackName" }, "bucket", { "Fn::Select" : [ 2, { "Fn::Split" : [ "-", {"Ref" : "bucketSettings"} ] } ] } ] ] },
            "NotificationConfiguration" : {
                "LambdaConfigurations": [
                    {
                      "Function" : { "Fn::GetAtt" : ["lambdaCreateThumbnail", "Arn"] },
                      "Event" : "s3:ObjectCreated:*",
                      "Filter" : {
                          "S3Key" : {
                            "Rules" : [
                              {
                                "Name" : "prefix",
                                "Value" : "barney/media/"
                              },
                              {
                                "Name" : "suffix",
                                "Value" : "png"
                              }
                            ]
                          }
                      }
                    },
                    {
                      "Function" : { "Fn::GetAtt" : ["lambdaCreateThumbnail", "Arn"] },
                      "Event" : "s3:ObjectCreated:*",
                      "Filter" : {
                          "S3Key" : {
                            "Rules" : [
                              {
                                "Name" : "prefix",
                                "Value" : "barney/media/"
                              },
                              {
                                "Name" : "suffix",
                                "Value" : "jpg"
                              }
                            ]
                          }
                      }
                    },
                    {
                      "Function" : { "Fn::GetAtt" : ["lambdaRekognition", "Arn"] },
                      "Event" : "s3:ObjectCreated:*",
                      "Filter" : {
                          "S3Key" : {
                            "Rules" : [
                              {
                                "Name" : "prefix",
                                "Value" : "barney/media/"
                              },
                              {
                                "Name" : "suffix",
                                "Value" : "rekognition"
                              }
                            ]
                          }
                      }
                    }
                ]
            },
            "CorsConfiguration": {
                "CorsRules": [
                    {
                        "AllowedHeaders": [
                            "*"
                        ],
                        "AllowedMethods": [
                            "GET"
                        ],
                        "AllowedOrigins": [
                            "*"
                        ],
                        "ExposedHeaders": [
                            "Date"
                        ]
                    }
                ]
           }
        }
    },

    "bucketPolicy" : {
        "Type" : "AWS::S3::BucketPolicy",
        "Properties" : {
            "Bucket" : {"Ref" : "bucket"},
            "PolicyDocument": {
                "Statement":[{
                    "Action":["s3:GetObject"],
                    "Effect":"Allow",
                    "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "bucket" } , "/*" ]]},
                    "Principal":"*"
                }]
            }
        }
    },

    "lambdaCreateThumbnailRolePolicy": {
        "Type": "AWS::IAM::Policy",
        "Properties": {
            "PolicyName": "LambdaExecutionRolePolicy",
            "Roles": [
                {"Ref": "lambdaCreateThumbnailRole"}
            ],
            "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:GetObject",
                        "s3:PutObject"
                      ],
                      "Resource": [
                        { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "bucket" } , "/*" ]]},
                        { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "bucketSettings" } , "/*" ]]}
                      ]
                    }
                ]
            }
        }
    },

    "lambdaRekognitionRolePolicy":{
        "Type": "AWS::IAM::Policy",
          "Properties": {
              "PolicyName": "lambdaRekognitionRolePolicy",
              "Roles": [
                  {"Ref": "lambdaRekognitionRole"}
              ],
              "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                            "rekognition:DetectFaces",
                            "rekognition:DetectLabels"
                        ],
                        "Resource": "*"
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "dynamodb:PutItem",
                              "dynamodb:Query"
                          ],
                          "Resource": [
                              {"Fn::Join": ["/",[{"Fn::Join": [":",["arn:aws:dynamodb",{"Ref": "AWS::Region"},{"Ref": "AWS::AccountId"}, "table"]]},{"Ref": "dynamodbTableRekognition"}]]}
                          ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                            "s3:Get*",
                            "s3:DeleteObject"
                        ],
                        "Resource": [
                          { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "bucket" } , "/*" ]]}
                        ]
                      }
                  ]
              }
        }
    },

    "lambdaMatchingJob" : {
      "Type": "AWS::Lambda::Function",
      "DependsOn":[
          "ExecuteLambdaDuplicateS3"
      ],
      "Properties": {
          "Handler": "matching_job.lambda_handler",
          "Code":{
              "S3Bucket": { "Ref": "bucketSettings"},
              "S3Key": "lambda/matchingJob.zip"
          },
          "Environment" : {
            "Variables" : {
              "NAME_ES_DOMAIN" : { "Fn::FindInMap" : [ "ElasticSearchDomain", "Domaine", "name"]}
            }
          },
          "Runtime": "python2.7",
          "Timeout" : "250",
          "MemorySize":"512",
          "Role": { "Fn::GetAtt" : ["lambdaMatchingRole", "Arn"] }

      }
    },

    "lambdaMatchingRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
              "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "Service": ["lambda.amazonaws.com"]
                          },
                          "Action": ["sts:AssumeRole"]
                      }
                  ]
              }
          }
     },

    "lambdaEventMatching" : {
        "Type": "AWS::Lambda::Function",
        "DependsOn": [
            "ExecuteLambdaDuplicateS3"
        ],
        "Properties": {
          "Handler" : "lambda_function.lambda_handler",
          "Code" : {
              "S3Bucket": {"Ref": "bucketSettings"},
              "S3Key": "lambda/eventMatchingEvent.zip"
          },
          "Environment" : {
            "Variables" : {
              "LAMBDA_MATCHING_JOB" : { "Ref" : "lambdaMatchingJob"},
              "LAMBDA_MATCHING_APPLICANT" : { "Ref" : "lambdaMatchingJob"},
              "NAME_DYNAMODB_TABLE" : { "Ref" : "dynamodbTableEventLog"},
              "HOST" : { "Fn::FindInMap" : [ "Database", "RDS", "host"]},
              "DATABASE" : { "Fn::FindInMap" : [ "Database", "RDS", "database"]},
              "PORT" : { "Fn::FindInMap" : [ "Database", "RDS", "port"]},
              "USER" : { "Fn::FindInMap" : [ "Database", "RDS", "user"]},
              "PASSWORD" : { "Fn::FindInMap" : [ "Database", "RDS", "password"]}
            }
          },
          "Runtime": "python2.7",
          "Timeout" : "250",
          "MemorySize":"512",
          "Role": { "Fn::GetAtt" : ["lambdaEventMatchingRole", "Arn"] }
        }
    },

    "lambdaEventMatchingRole":{
          "Type": "AWS::IAM::Role",
          "Properties": {
              "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "Service": ["lambda.amazonaws.com"]
                          },
                          "Action": ["sts:AssumeRole"]
                      }
                  ]
              },
            "Policies" : [
              {
                  "PolicyName": "lambdaEventMatchingRolePolicy",
                  "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                            "Effect": "Allow",
                            "Action": [
                                "lambda:InvokeFunction"
                            ],
                            "Resource": [
                                { "Fn::GetAtt" : ["lambdaMatchingJob", "Arn"] }
                            ]
                        }
                      ]
                  }
              }
            ]
          }
      },

    "lambdaEventApplicant": {
        "Type": "AWS::Lambda::Function",
        "DependsOn": [
            "ExecuteLambdaDuplicateS3"
        ],
        "Properties": {
          "Handler" : "lambda_function.lambda_handler",
          "Code" : {
              "S3Bucket": {"Ref": "bucketSettings"},
              "S3Key": "lambda/eventApplicantEvent.zip"
          },
          "Environment" : {
            "Variables" : {
              "NAME_ES_DOMAIN" : { "Fn::FindInMap" : [ "ElasticSearchDomain", "Domaine", "name"]},
              "NAME_DYNAMODB_TABLE" : { "Ref" : "dynamodbTableEventLog" }
            }
          },
          "Runtime": "python2.7",
          "Timeout" : "250",
          "MemorySize":"512",
          "Role": { "Fn::GetAtt" : ["lambdaEventApplicantJobRole", "Arn"] }
        }
    },

    "lambdaEventJob":{
        "Type": "AWS::Lambda::Function",
        "DependsOn": [
            "ExecuteLambdaDuplicateS3"
        ],
        "Properties": {
          "Handler" : "lambda_function.lambda_handler",
          "Code" : {
              "S3Bucket": {"Ref": "bucketSettings"},
              "S3Key": "lambda/eventJobEvent.zip"
          },
          "Environment" : {
            "Variables" : {
              "NAME_ES_DOMAIN" : { "Fn::FindInMap" : [ "ElasticSearchDomain", "Domaine", "name"]},
              "NAME_DYNAMODB_TABLE" : { "Ref" : "dynamodbTableEventLog" }
            }
          },
          "Runtime": "python2.7",
          "Timeout" : "250",
          "MemorySize":"512",
          "Role": { "Fn::GetAtt" : ["lambdaEventApplicantJobRole", "Arn"] }
        }
    },

    "lambdaEventApplicantJobRole" :{
          "Type": "AWS::IAM::Role",
          "Properties": {
              "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "Service": ["lambda.amazonaws.com"]
                          },
                          "Action": ["sts:AssumeRole"]
                      }
                  ]
              }
          }
      },

    "lambdaEventRolePolicy":{
        "Type": "AWS::IAM::Policy",
        "Properties": {
            "PolicyName": "lambdaEventRolePolicy",
            "Roles": [
                {"Ref": "lambdaEventApplicantJobRole"},
                {"Ref": "lambdaEventMatchingRole"}
            ],
            "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "dynamodb:DescribeTable",
                            "dynamodb:GetItem",
                            "dynamodb:UpdateItem"
                        ],
                        "Resource": [
                            {"Fn::Join": ["/",[{"Fn::Join": [":",["arn:aws:dynamodb",{"Ref": "AWS::Region"},{"Ref": "AWS::AccountId"}, "table"]]},{"Ref": "dynamodbTableEventLog"}]]}
                        ]
                    }
                ]
            }
        }
    },

    "lambdaEventStreamLog" : {
        "Type": "AWS::Lambda::Function",
        "DependsOn": [
            "ExecuteLambdaDuplicateS3", "lambdaEventApplicant", "lambdaEventJob", "lambdaEventMatching"
        ],
        "Properties": {
          "Handler" : "lambda_function.lambda_handler",
          "Code" : {
              "S3Bucket": {"Ref": "bucketSettings"},
              "S3Key": "lambda/streamEventLog.zip"
          },
          "Environment" : {
            "Variables" : {
              "LAMBDA_MATCHING_EVENT" : { "Ref" : "lambdaEventMatching" },
              "LAMBDA_APPLICANT_EVENT" : { "Ref" : "lambdaEventApplicant" },
              "LAMBDA_JOB_EVENT" : { "Ref" : "lambdaEventJob" }
            }
          },
          "Runtime": "python2.7",
          "Timeout" : "100",
          "MemorySize":"512",
          "Role": { "Fn::GetAtt" : ["lambdaEventStreamLogRole", "Arn"] }
        }
    },

    "lambdaEventStreamLogRole" : {
          "Type": "AWS::IAM::Role",
          "Properties": {
              "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "Service": ["lambda.amazonaws.com"]
                          },
                          "Action": ["sts:AssumeRole"]
                      }
                  ]
              },
            "Policies" : [
              {
                  "PolicyName": "lambdaEventStreamLogRolePolicy",
                  "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                            "Effect": "Allow",
                            "Action": [
                                "lambda:InvokeFunction"
                            ],
                            "Resource": [
                                { "Fn::GetAtt" : ["lambdaEventApplicant", "Arn"] },
                                { "Fn::GetAtt" : ["lambdaEventJob", "Arn"] },
                                { "Fn::GetAtt" : ["lambdaEventMatching", "Arn"] }
                            ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:DescribeStream",
                            "dynamodb:GetRecords",
                            "dynamodb:GetShardIterator",
                            "dynamodb:ListStreams"
                          ],
                          "Resource": "*"
                        }
                      ]
                  }
              }
            ]
          }
      },

    "EventSourceDynamodbEventLog" : {
       "Type": "AWS::Lambda::EventSourceMapping",
          "Properties": {
            "BatchSize" : 100,
            "Enabled" : true,
            "EventSourceArn" : { "Fn::GetAtt" : ["dynamodbTableEventLog", "StreamArn"] },
            "FunctionName" : { "Fn::GetAtt" : ["lambdaEventStreamLog", "Arn"] },
            "StartingPosition" : "LATEST"
          }
    }

  }
}
